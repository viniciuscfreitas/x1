package br.com.primeleague.x1.listeners;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.Material;

import br.com.primeleague.x1.Main;
import br.com.primeleague.x1.managers.MessageManager;
import br.com.primeleague.x1.enums.DuelType;
import br.com.primeleague.x1.enums.GUIMenu;
import br.com.primeleague.x1.enums.TeamRole;
import br.com.primeleague.x1.team.Team;
import br.com.primeleague.x1.team.TeamMember;

import java.util.List;
import java.util.Arrays;
import java.util.UUID;

/**
 * Listener de eventos relacionados à GUI
 */
public class GUIListener implements Listener {

    private final Main plugin;
    
    /**
     * Construtor
     * 
     * @param plugin Instância do plugin
     */
    public GUIListener(Main plugin) {
        this.plugin = plugin;
    }
    
    /**
     * Evento disparado quando um jogador clica em um inventário
     */
    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        Player player = (Player) event.getWhoClicked();
        ItemStack clickedItem = event.getCurrentItem();
        Inventory inventory = event.getInventory();
        
        // Verificar se o inventário é uma GUI do plugin
        if (inventory.getTitle() == null || clickedItem == null) {
            return;
        }
        
        String title = inventory.getTitle();
        
        // Menu principal
        if (title.equals(plugin.getGUIManager().getMainMenuTitle())) {
            event.setCancelled(true);
            handleMainMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de administração
        if (title.equals(plugin.getGUIManager().getAdminMenuTitle())) {
            event.setCancelled(true);
            handleAdminMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de seleção de jogador
        if (title.equals(plugin.getGUIManager().getPlayerSelectionMenuTitle())) {
            event.setCancelled(true);
            handlePlayerSelectionMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de confirmação de desafio
        if (title.equals(plugin.getGUIManager().getChallengeConfirmationMenuTitle())) {
            event.setCancelled(true);
            handleChallengeConfirmationMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de apostas
        if (title.equals(plugin.getGUIManager().getBetMenuTitle())) {
            event.setCancelled(true);
            handleBetMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de estatísticas
        if (title.equals(plugin.getGUIManager().getStatsMenuTitle())) {
            event.setCancelled(true);
            handleStatsMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de ranking
        if (title.equals(plugin.getGUIManager().getRankingMenuTitle())) {
            event.setCancelled(true);
            handleRankingMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de equipe
        if (title.equals(plugin.getGUIManager().getTeamMenuTitle())) {
            event.setCancelled(true);
            handleTeamMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de adicionar jogador à equipe
        if (title.equals("§8Convidar Jogador")) {
            event.setCancelled(true);
            handleTeamAddMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
        
        // Menu de desafio de equipe
        if (title.equals("§4Desafiar Equipe")) {
            event.setCancelled(true);
            handleTeamChallengeMenuClick(player, clickedItem, event.getRawSlot());
            return;
        }
    }
    
    /**
     * Evento disparado quando um jogador arrasta itens em um inventário
     */
    @EventHandler
    public void onInventoryDrag(InventoryDragEvent event) {
        Inventory inventory = event.getInventory();
        
        // Verificar se o inventário é uma GUI do plugin
        if (inventory.getTitle() == null) {
            return;
        }
        
        String title = inventory.getTitle();
        
        // Cancelar o arrastar em qualquer GUI do plugin
        if (title.equals(plugin.getGUIManager().getMainMenuTitle()) || 
            title.equals(plugin.getGUIManager().getAdminMenuTitle()) || 
            title.equals(plugin.getGUIManager().getPlayerSelectionMenuTitle()) || 
            title.equals(plugin.getGUIManager().getChallengeConfirmationMenuTitle()) || 
            title.equals(plugin.getGUIManager().getBetMenuTitle()) || 
            title.equals(plugin.getGUIManager().getStatsMenuTitle()) || 
            title.equals(plugin.getGUIManager().getRankingMenuTitle()) || 
            title.equals(plugin.getGUIManager().getTeamMenuTitle())) {
            
            event.setCancelled(true);
        }
    }
    
    /**
     * Evento disparado quando um jogador fecha um inventário
     */
    @EventHandler
    public void onInventoryClose(InventoryCloseEvent event) {
        // Implementação futura, se necessário
    }
    
    /**
     * Processa cliques no menu principal
     */
    private void handleMainMenuClick(Player player, ItemStack clickedItem, int slot) {
        switch (slot) {
            case 21: // Desafiar jogador
                plugin.getGUIManager().promptPlayerSelection(player);
                break;
                
            case 22: // Estatísticas
                plugin.getGUIManager().openStatsMenu(player);
                break;
                
            case 23: // Ranking
                plugin.getGUIManager().openRankingMenu(player);
                break;
                
            case 31: // Equipes
                plugin.getGUIManager().openTeamMenu(player);
                break;
                
            case 40: // Assistir duelos
                if (!plugin.getArenaManager().isArenaConfigured()) {
                    plugin.getMessageManager().sendMessage(player, "arena.nao-configurada");
                    return;
                }
                
                player.closeInventory();
                plugin.getArenaManager().teleportToSpectator(player);
                plugin.getMessageManager().sendMessage(player, "duelo.modo-espectador");
                break;
                
            case 49: // Menu de administração
                if (player.hasPermission("primeleaguex1.admin")) {
                    plugin.getGUIManager().openAdminMenu(player);
                } else {
                    plugin.getMessageManager().sendMessage(player, "geral.sem-permissao");
                }
                break;
        }
    }
    
    /**
     * Processa cliques no menu de administração
     */
    private void handleAdminMenuClick(Player player, ItemStack clickedItem, int slot) {
        switch (slot) {
            case 20: // Definir posição 1
                player.closeInventory();
                plugin.getArenaManager().setPos1(player.getLocation());
                plugin.getMessageManager().sendMessage(player, "arena.pos1-definida");
                break;
                
            case 22: // Definir posição 2
                player.closeInventory();
                plugin.getArenaManager().setPos2(player.getLocation());
                plugin.getMessageManager().sendMessage(player, "arena.pos2-definida");
                break;
                
            case 24: // Definir local de espectador
                player.closeInventory();
                plugin.getArenaManager().setSpectatorLocation(player.getLocation());
                plugin.getMessageManager().sendMessage(player, "arena.espectador-definido");
                break;
                
            case 31: // Recarregar configuração
                player.closeInventory();
                plugin.getConfigManager().reloadConfigs();
                plugin.getMessageManager().reload();
                plugin.getMessageManager().sendMessage(player, "geral.plugin-ativado");
                break;
                
            case 49: // Voltar
                plugin.getGUIManager().openMainMenu(player);
                break;
        }
    }
    
    /**
     * Processa cliques no menu de seleção de jogador
     */
    private void handlePlayerSelectionMenuClick(Player player, ItemStack clickedItem, int slot) {
        if (slot == 49) { // Botão voltar
            plugin.getGUIManager().openMainMenu(player);
            return;
        }
        
        // Verificar se o item é um jogador
        if (clickedItem != null && clickedItem.hasItemMeta() && clickedItem.getItemMeta().hasDisplayName()) {
            String displayName = clickedItem.getItemMeta().getDisplayName();
            String targetName = displayName.replaceAll("§[0-9a-fklmnor]", "");
            
            // Verificar se o jogador está online
            Player target = plugin.getServer().getPlayerExact(targetName);
            if (target == null || !target.isOnline()) {
                plugin.getMessageManager().sendMessage(player, "geral.jogador-offline");
                return;
            }
            
            // Verificar se o jogador tentou desafiar a si mesmo
            if (player.getName().equals(targetName)) {
                plugin.getMessageManager().sendMessage(player, "geral.voce-mesmo");
                return;
            }
            
            // Verificar se o jogador já está em duelo
            if (plugin.getDuelManager().isInDuel(player.getName())) {
                plugin.getMessageManager().sendMessage(player, "duelo.duelo-em-andamento");
                return;
            }
            
            // Verificar se o alvo já está em duelo
            if (plugin.getDuelManager().isInDuel(targetName)) {
                plugin.getMessageManager().sendMessage(player, "duelo.oponente-em-duelo");
                return;
            }
            
            // Abrir menu de confirmação de desafio
            plugin.getGUIManager().openChallengeConfirmationMenu(player, targetName);
        }
    }
    
    /**
     * Processa cliques no menu de confirmação de desafio
     */
    private void handleChallengeConfirmationMenuClick(Player player, ItemStack clickedItem, int slot) {
        String opponent = plugin.getGUIManager().getSelectedPlayer(player);
        
        if (opponent == null) {
            player.closeInventory();
            return;
        }
        
        Player target = plugin.getServer().getPlayerExact(opponent);
        
        // Verificar se o jogador está online
        if (target == null || !target.isOnline()) {
            plugin.getMessageManager().sendMessage(player, "geral.jogador-offline");
            player.closeInventory();
            return;
        }
        
        switch (slot) {
            case 10: // Arena - Itens Próprios
                if (!plugin.getArenaManager().isArenaConfigured()) {
                    plugin.getMessageManager().sendMessage(player, "arena.nao-configurada");
                    return;
                }
                
                plugin.getGUIManager().setSelectedDuelType(player, DuelType.ARENA);
                
                // Verificar se apostas estão habilitadas
                if (plugin.getConfigManager().useBets()) {
                    plugin.getGUIManager().openBetMenu(player, opponent);
                } else {
                    player.closeInventory();
                    plugin.getDuelManager().sendChallenge(player, target, DuelType.ARENA, 0);
                }
                break;
                
            case 12: // Local - Itens Próprios
                if (!plugin.getArenaManager().arePlayersCloseEnough(player, target)) {
                    plugin.getMessageManager().sendMessage(player, "duelo.desafio-muito-longe");
                    return;
                }
                
                plugin.getGUIManager().setSelectedDuelType(player, DuelType.LOCAL);
                
                // Verificar se apostas estão habilitadas
                if (plugin.getConfigManager().useBets()) {
                    plugin.getGUIManager().openBetMenu(player, opponent);
                } else {
                    player.closeInventory();
                    plugin.getDuelManager().sendChallenge(player, target, DuelType.LOCAL, 0);
                }
                break;
                
            case 14: // Arena - Com Kit
                if (!plugin.getArenaManager().isArenaConfigured()) {
                    plugin.getMessageManager().sendMessage(player, "arena.nao-configurada");
                    return;
                }
                
                plugin.getGUIManager().setSelectedDuelType(player, DuelType.ARENA_KIT);
                
                // Verificar se apostas estão habilitadas
                if (plugin.getConfigManager().useBets()) {
                    plugin.getGUIManager().openBetMenu(player, opponent);
                } else {
                    player.closeInventory();
                    plugin.getDuelManager().sendChallenge(player, target, DuelType.ARENA_KIT, 0);
                }
                break;
                
            case 16: // Local - Com Kit
                if (!plugin.getArenaManager().arePlayersCloseEnough(player, target)) {
                    plugin.getMessageManager().sendMessage(player, "duelo.desafio-muito-longe");
                    return;
                }
                
                plugin.getGUIManager().setSelectedDuelType(player, DuelType.LOCAL_KIT);
                
                // Verificar se apostas estão habilitadas
                if (plugin.getConfigManager().useBets()) {
                    plugin.getGUIManager().openBetMenu(player, opponent);
                } else {
                    player.closeInventory();
                    plugin.getDuelManager().sendChallenge(player, target, DuelType.LOCAL_KIT, 0);
                }
                break;
                
            case 36: // Voltar (novo botão)
                plugin.getGUIManager().openPlayerSelectionMenu(player);
                break;
                
            case 40: // Cancelar
                player.closeInventory();
                plugin.getGUIManager().clearPlayerData(player);
                break;
        }
    }
    
    /**
     * Processa cliques no menu de apostas
     */
    private void handleBetMenuClick(Player player, ItemStack clickedItem, int slot) {
        String opponent = plugin.getGUIManager().getSelectedPlayer(player);
        
        if (opponent == null) {
            player.closeInventory();
            return;
        }
        
        Player target = plugin.getServer().getPlayerExact(opponent);
        
        // Verificar se o jogador está online
        if (target == null || !target.isOnline()) {
            plugin.getMessageManager().sendMessage(player, "geral.jogador-offline");
            player.closeInventory();
            return;
        }
        
        // Valores pré-definidos de aposta (slots 10-16)
        if (slot >= 10 && slot <= 16) {
            // Obter os valores pré-definidos das apostas da configuração
            List<Integer> predefinedValues = plugin.getConfigManager().getConfig().getIntegerList("apostas.valores-predefinidos");
            if (predefinedValues.isEmpty()) {
                predefinedValues = Arrays.asList(100, 500, 1000, 5000, 10000);
            }
            
            // Calcular qual valor foi selecionado baseado no slot
            int valueIndex = slot - 10;
            if (valueIndex >= 0 && valueIndex < predefinedValues.size()) {
                double betAmount = predefinedValues.get(valueIndex);
                
                // Verificar se o jogador tem dinheiro suficiente
                if (!plugin.getEconomyManager().hasEnoughMoney(player, betAmount)) {
                    plugin.getMessageManager().sendMessage(player, "apostas.saldo-insuficiente", "%valor%", plugin.getEconomyManager().formatMoney(betAmount));
                    return;
                }
                
                player.closeInventory();
                
                // Enviar desafio com aposta
                DuelType duelType = plugin.getGUIManager().getSelectedDuelType(player);
                plugin.getDuelManager().sendChallenge(player, target, duelType, betAmount);
            } else {
                plugin.getMessageManager().sendMessage(player, "apostas.erro-valor");
            }
        }
        // Valor personalizado (esmeralda no slot 22)
        else if (slot == 22 && clickedItem != null && clickedItem.getType() == Material.EMERALD) {
            plugin.getGUIManager().promptBetAmount(player, opponent);
        }
        // Sem aposta (bedrock no slot 31)
        else if (slot == 31 && clickedItem != null && clickedItem.getType() == Material.BEDROCK) {
            player.closeInventory();
            
            // Enviar desafio sem aposta
            DuelType duelType = plugin.getGUIManager().getSelectedDuelType(player);
            plugin.getDuelManager().sendChallenge(player, target, duelType, 0);
        }
        // Voltar (flecha no slot 40)
        else if (slot == 40 && clickedItem != null && clickedItem.getType() == Material.ARROW) {
            plugin.getGUIManager().openChallengeConfirmationMenu(player, opponent);
        }
    }
    
    /**
     * Processa cliques no menu de estatísticas
     */
    private void handleStatsMenuClick(Player player, ItemStack clickedItem, int slot) {
        if (slot == 49) { // Botão voltar
            plugin.getGUIManager().openMainMenu(player);
        }
    }
    
    /**
     * Processa cliques no menu de ranking
     */
    private void handleRankingMenuClick(Player player, ItemStack clickedItem, int slot) {
        if (slot == 49) { // Botão voltar
            plugin.getGUIManager().openMainMenu(player);
        }
    }
    
    /**
     * Processa cliques no menu de equipe
     */
    private void handleTeamMenuClick(Player player, ItemStack clickedItem, int slot) {
        switch (slot) {
            case 11: // Criar equipe
                if (plugin.getTeamManager().isInTeam(player.getName())) {
                    plugin.getMessageManager().sendMessage(player, "equipes.ja-em-equipe");
                    return;
                }
                
                player.closeInventory();
                plugin.getTeamManager().createTeam(player.getName());
                plugin.getMessageManager().sendMessage(player, "equipes.equipe-formada");
                break;
                
            case 13: // Convidar jogador
                if (!plugin.getTeamManager().isTeamLeader(player.getName())) {
                    plugin.getMessageManager().sendMessage(player, "equipes.nao-lider");
                    return;
                }
                
                plugin.getGUIManager().openTeamAddMenu(player);
                break;
                
            case 15: // Sair da equipe
                if (!plugin.getTeamManager().isInTeam(player.getName())) {
                    plugin.getMessageManager().sendMessage(player, "equipes.sem-equipe");
                    return;
                }
                
                player.closeInventory();
                plugin.getTeamManager().removeFromTeam(player.getName());
                plugin.getMessageManager().sendMessage(player, "equipes.saiu-equipe");
                break;
                
            case 22: // Desafiar outra equipe (novo botão)
                if (!plugin.getTeamManager().isTeamLeader(player.getName())) {
                    plugin.getMessageManager().sendMessage(player, "equipes.nao-lider");
                    return;
                }
                
                plugin.getGUIManager().openTeamChallengeMenu(player);
                break;
                
            case 31: // Voltar
                plugin.getGUIManager().openMainMenu(player);
                break;
        }
    }
    
    /**
     * Processa cliques no menu de adicionar jogador à equipe
     */
    private void handleTeamAddMenuClick(Player player, ItemStack clickedItem, int slot) {
        // Verificar se o inventário é o menu de convidar jogador
        if (player.getOpenInventory().getTitle().equals("§8Convidar Jogador")) {
            // Cancelar o clique para não pegar o item
            
            if (slot == 49) { // Botão voltar
                plugin.getGUIManager().openTeamMenu(player);
                return;
            }
            
            // Verificar se o item é um jogador
            if (clickedItem != null && clickedItem.getType() == Material.SKULL_ITEM && 
                clickedItem.hasItemMeta() && clickedItem.getItemMeta().hasDisplayName()) {
                
                String displayName = clickedItem.getItemMeta().getDisplayName();
                String targetName = displayName.substring(2); // Remover o "§e" do início
                
                System.out.println("[PrimeLeagueX1] Tentativa de convidar jogador: " + targetName);
                
                // Verificar se o jogador está online
                Player target = plugin.getServer().getPlayerExact(targetName);
                if (target == null || !target.isOnline()) {
                    plugin.getMessageManager().sendMessage(player, "geral.jogador-offline");
                    return;
                }
                
                // Verificar se o jogador já está em uma equipe
                if (plugin.getTeamManager().isInTeam(targetName)) {
                    plugin.getMessageManager().sendMessage(player, "equipes.jogador-em-equipe", 
                            "%jogador%", targetName);
                    return;
                }
                
                // Enviar convite em vez de adicionar diretamente
                if (plugin.getTeamManager().invitePlayerToTeam(player.getName(), targetName)) {
                    player.closeInventory();
                    plugin.getMessageManager().sendMessage(player, "equipes.convite-enviado", 
                            "%jogador%", targetName);
                    plugin.getMessageManager().sendMessage(target, "equipes.convite-recebido", 
                            "%jogador%", player.getName());
                } else {
                    plugin.getMessageManager().sendMessage(player, "equipes.erro-enviar-convite");
                }
            }
        }
    }
    
    /**
     * Processa cliques no menu de desafio de equipe
     */
    private void handleTeamChallengeMenuClick(Player player, ItemStack clickedItem, int slot) {
        // Botão voltar
        if (slot == 49) {
            plugin.getGUIManager().openTeamMenu(player);
            return;
        }
        
        // Ignorar cliques na informação da própria equipe
        if (slot == 4) {
            return;
        }
        
        // Verificar se é um item válido
        if (clickedItem != null && clickedItem.getType() == Material.WOOL && 
            clickedItem.hasItemMeta() && clickedItem.getItemMeta().hasDisplayName()) {
            
            // Obter o nome da equipe alvo
            String displayName = clickedItem.getItemMeta().getDisplayName();
            String targetTeamName = displayName.substring(4); // Remover o "§a§l" do início
            
            // Obter o líder da equipe alvo
            String targetLeaderName = plugin.getTeamManager().getTeamLeader(targetTeamName);
            
            // Verificar se o líder é válido
            if (targetLeaderName == null) {
                plugin.getMessageManager().sendMessage(player, "equipes.equipe-invalida");
                return;
            }
            
            // Verificar se o jogador já está em duelo
            if (plugin.getDuelManager().isInDuel(player.getName())) {
                plugin.getMessageManager().sendMessage(player, "duelo.duelo-em-andamento");
                return;
            }
            
            // Verificar se a equipe alvo já está em duelo
            List<String> targetTeam = plugin.getTeamManager().getTeam(targetLeaderName);
            for (String memberName : targetTeam) {
                if (plugin.getDuelManager().isInDuel(memberName)) {
                    plugin.getMessageManager().sendMessage(player, "duelo.oponente-em-duelo");
                    return;
                }
            }
            
            // Verificar o tamanho das equipes
            List<String> playerTeam = plugin.getTeamManager().getTeam(player.getName());
            
            // Escolher o tipo de duelo com base no tamanho da equipe
            DuelType teamDuelType;
            if (playerTeam.size() == 2) {
                // Duelo 2x2
                if (plugin.getArenaManager().isArenaConfigured()) {
                    teamDuelType = DuelType.TEAM_2X2_ARENA;
                } else {
                    teamDuelType = DuelType.TEAM_2X2_LOCAL;
                }
            } else if (playerTeam.size() == 3) {
                // Duelo 3x3
                if (plugin.getArenaManager().isArenaConfigured()) {
                    teamDuelType = DuelType.TEAM_3X3_ARENA;
                } else {
                    teamDuelType = DuelType.TEAM_3X3_LOCAL;
                }
            } else {
                // Tamanho de equipe não suportado
                plugin.getMessageManager().sendMessage(player, "equipes.tamanho-invalido");
                return;
            }
            
            // Verificar se é um duelo local
            if (teamDuelType.isLocal()) {
                // Verificar se os líderes estão suficientemente próximos
                Player targetLeader = Bukkit.getPlayerExact(targetLeaderName);
                if (targetLeader == null || !targetLeader.isOnline()) {
                    plugin.getMessageManager().sendMessage(player, "equipes.lider-offline");
                    return;
                }
                
                if (!plugin.getArenaManager().arePlayersCloseEnough(player, targetLeader)) {
                    plugin.getMessageManager().sendMessage(player, "duelo.desafio-muito-longe");
                    return;
                }
            }
            
            // Fechar o inventário e enviar o desafio
            player.closeInventory();
            
            // TODO: Implementar o envio de desafios de equipe com aposta
            // Por enquanto, vamos enviar sem aposta (valor 0)
            plugin.getDuelManager().sendTeamChallenge(player.getName(), targetLeaderName, teamDuelType, 0);
            
            // Enviar mensagem de confirmação
            plugin.getMessageManager().sendMessage(player, "equipes.desafio-enviado", 
                    "%jogador%", targetLeaderName);
        }
    }
} 